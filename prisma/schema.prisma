generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Track {
  id          String   @id @default(cuid())
  title       String
  artist      String
  spotifyUrl  String?
  youtubeUrl  String?
  imageUrl    String?
  weekStart   DateTime
  createdAt   DateTime @default(now())
  votes       Vote[]
  comments    Comment[]
  
  @@index([weekStart])
}

model Vote {
  id        String   @id @default(cuid())
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  userId    String   // Clerk user ID
  value     Int      // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())
  
  @@unique([trackId, userId])
  @@index([trackId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  userId    String   // Clerk user ID
  userName  String   // Store user name for display
  text      String
  createdAt DateTime @default(now())
  
  @@index([trackId])
  @@index([userId])
}

model HotTake {
  id        String           @id @default(cuid())
  userId    String           // Clerk user ID
  userName  String           // Store user name for display
  title     String
  content   String
  createdAt DateTime         @default(now())
  comments  HotTakeComment[]
  
  @@index([userId])
  @@index([createdAt])
}

model HotTakeComment {
  id         String   @id @default(cuid())
  hotTakeId  String
  hotTake    HotTake  @relation(fields: [hotTakeId], references: [id], onDelete: Cascade)
  userId     String   // Clerk user ID
  userName   String   // Store user name for display
  text       String
  createdAt  DateTime @default(now())
  
  @@index([hotTakeId])
  @@index([userId])
}

model User {
  id              String        @id // Clerk user ID
  username        String        @unique
  displayName     String
  bio             String?
  avatarUrl       String?
  createdAt       DateTime      @default(now())
  posts           Post[]
  postLikes       PostLike[]
  postComments    PostComment[]
  followers       Follow[]      @relation("UserFollowers")
  following       Follow[]      @relation("UserFollowing")
  
  @@index([username])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String   // User who is following
  followingId String   // User being followed
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Post {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime      @default(now())
  likes     PostLike[]
  comments  PostComment[]
  
  @@index([userId])
  @@index([createdAt])
}

model PostLike {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model PostComment {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  text      String
  createdAt DateTime @default(now())
  
  @@index([postId])
  @@index([userId])
}
